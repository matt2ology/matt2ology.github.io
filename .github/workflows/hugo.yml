# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch: # Triggered from another repo (e.g., notes)
    types: [sync-from-notes]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.151.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout with submodules
        uses: actions/checkout@v5
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update submodules to latest commit on main branch
        run: |
          git submodule sync --recursive
          git submodule deinit --all --force
          git submodule update --init --recursive
          git submodule update --remote content  # This fetches the latest commit for the content submodule
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add content
          if git diff --cached --quiet; then
            echo "No submodule changes to commit"
          else
            echo "Submodule changes detected. Committing..."
            git commit -m "chore: sync content from notes repo"
            git push origin HEAD:main
            echo "Changes pushed to main branch"
          fi

      - name: Convert markdown links to Hugo shortcodes
        run: |
          shopt -s globstar nullglob
          changes=()  # list to store all changes across files

          for file in content/**/*.md; do
            # skip templates folder
            if [[ "$file" == content/templates/* ]]; then
              continue
            fi

            echo "Processing $file"

            # Make a temp copy for diffing
            before=$(mktemp)
            cp "$file" "$before"

            # Convert various Markdown and wiki-style links into Hugo-compatible relative reference shortcodes
            # Convert wiki-style links with label ([[Page|Label]]) into Hugo relref shortcodes:
            # Example: [[MyPage|Click here]] → [Click here]({{< relref "mypage.md" >}})
            sed -i -E 's/\[\[([^]|#]+)\|([^]]+)\]\]/[\2]({{< relref "\L\1.md" >}})/g' "$file"

            # Convert wiki-style links with section ([[Page#Section]]) into Hugo relref with anchor:
            # Example: [[MyPage#section]] → [section]({{< relref "mypage.md#section" >}})
            sed -i -E 's/\[\[([^]|#]+)#([^\]]+)\]\]/[\2]({{< relref "\L\1.md#\2" >}})/g' "$file"

            # Convert simple wiki-style links ([[Page]]) into Hugo relref shortcodes:
            # Example: [[MyPage]] → [MyPage]({{< relref "mypage.md" >}})
            sed -i -E 's/\[\[([^]|#]+)\]\]/[\1]({{< relref "\L\1.md" >}})/g' "$file"

            # Convert Markdown links to sections in .md files into Hugo relref format:
            # Example: [Intro](guide.md#start) → [Intro]({{< relref "guide.md#start" >}})
            sed -i -E 's/\[([^]]+)\]\(([^\)]+\.md#[^\)]+)\)/[\1]({{< relref "\2" >}})/g' "$file"

            # Convert standard Markdown links to .md files into Hugo relref format:
            # Example: [Guide](guide.md) → [Guide]({{< relref "guide.md" >}})
            sed -i -E 's/\[([^]]+)\]\(([^\)]+\.md)\)/[\1]({{< relref "\2" >}})/g' "$file"

            # Collect changes by comparing before vs after
            while IFS= read -r line_before && IFS= read -r line_after <&3; do
              if [[ "$line_before" != "$line_after" ]]; then
                changes+=("File: $file")
                changes+=("Original: $line_before")
                changes+=("Converted: $line_after")
              fi
            done <"$before" 3<"$file"

            rm "$before"
          done

      - name: Replace wiki-style links with Hugo relref
        run: |
          # Find all Markdown (*.md) files recursively
          # -print0 ensures filenames are null-delimited (handles spaces safely)
          find . -name "*.md" -print0 | xargs -0 perl -pi -e "
            # Substitute wiki-style links with Hugo relref shortcodes
            s{
              \[\[              # Match literal '[['
              (.+?)             # Capture group 1: the page path, non-greedy (e.g., ../path/to/file)
              \#                # Match literal '#'
              (.+?)             # Capture group 2: anchor text (e.g., heading in the file)
              \|                # Match literal '|' (separates anchor and link text)
              (.+?)             # Capture group 3: link label (the text to display)
              \]\]              # Match literal ']]'
            }{
              # Assign captured values to variables
              my (\$path, \$anchor, \$text) = (\$1, \$2, \$3);

              # Normalize the anchor for Hugo-compatible heading links:
              \$anchor = lc(\$anchor);         # Convert to lowercase
              \$anchor =~ s/[^a-z0-9 ]//g;     # Remove punctuation (only keep letters, digits, spaces)
              \$anchor =~ s/ +/-/g;            # Replace spaces with hyphens (Hugo's slug logic)

              # Ensure the file path ends with .md (Hugo expects this format)
              \$path .= '.md' unless \$path =~ /\.md\$/;

              # Return the final Hugo relref shortcode using the normalized path and anchor
              \"[\$text]({{< relref \\\"\$path#\$anchor\\\" >}})\"
            }gex
            # g = global (replace all matches)
            # e = evaluate replacement expression as Perl code
            # x = extended mode (allow comments and spacing in regex)
          "

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
