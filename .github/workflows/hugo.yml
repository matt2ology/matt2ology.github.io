# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch: # Triggered from another repo (e.g., notes)
    types: [sync-from-notes]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.151.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout with submodules
        uses: actions/checkout@v5
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update submodules to latest commit on main branch
        run: |
          git submodule sync --recursive
          git submodule deinit --all --force
          git submodule update --init --recursive
          git submodule update --remote content  # This fetches the latest commit for the content submodule
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add content
          if git diff --cached --quiet; then
            echo "No submodule changes to commit"
          else
            echo "Submodule changes detected. Committing..."
            git commit -m "chore: sync content from notes repo"
            git push origin HEAD:main
            echo "Changes pushed to main branch"
          fi

      - name: Replace wiki-style links with Hugo relref
        run: |
          # Find all Markdown files under 'content/', excluding anything in 'templates/'
          find content -type f -name "*.md" ! -path "*/templates/*" \
            # For each file found, run the following Perl code in place (-pi)
            -exec perl -pi -e '
              #---------------------------------------------------------------
              # Helper: slugify() converts section titles into Hugo-friendly slugs
              # Example: "Getting Started!" -> "getting-started"
              #---------------------------------------------------------------
              sub slugify {
                my $s = lc(shift);           # Convert to lowercase
                $s =~ s/[^a-z0-9]+/-/g;      # Replace non-alphanumeric with hyphens
                $s =~ s/^-|-$//g;            # Trim leading/trailing hyphens
                return $s;                   # Return normalized string
              }

              #---------------------------------------------------------------
              # Convert wiki-style links of the form:
              #   [[Page|Label]]   -> [Label]({{< relref "page.md" >}})
              #   [[Page#Section]] -> [Section]({{< relref "page.md#section" >}})
              #   [[Page]]         -> [Page]({{< relref "page.md" >}})
              #---------------------------------------------------------------
              s{
                \[\[([^\]|#]+)(?:\|([^\]]+))?(?:#([^\]]+))?\]\]  # Match wiki link variants
              }{
                my ($page, $label, $anchor) = ($1, $2, $3);      # Capture page, label, anchor
                $page = lc($page);                               # Lowercase page filename
                $anchor = defined $anchor ? "#" . slugify($anchor) : "";  # Slugify anchor if present
                my $text = $label // ($3 ? $3 : $1);             # Use label if given, else anchor, else page name
                "[$text]({{< relref \"$page.md$anchor\" >}})"    # Build Hugo relref link
              }gex;

              #---------------------------------------------------------------
              # Convert normal Markdown links pointing to .md files into relrefs:
              #   [Label](file.md)        -> [Label]({{< relref "file.md" >}})
              #   [Label](file.md#anchor) -> [Label]({{< relref "file.md#anchor" >}})
              #---------------------------------------------------------------
              s{
                \[([^\]]+)\]\(([^\)]+\.md)(?:#([^\)]+))?\)       # Match Markdown links to .md files
              }{
                my ($label, $file, $anchor) = ($1, $2, $3);      # Capture label, file, anchor
                $anchor = defined $anchor ? "#" . slugify($anchor) : "";  # Slugify anchor if present
                "[$label]({{< relref \"$file$anchor\" >}})"      # Replace with Hugo relref link
              }gex;
            ' {} +  # {} is replaced by file paths, '+' batches multiple files for efficiency

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
