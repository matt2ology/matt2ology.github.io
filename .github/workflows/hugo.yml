# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch: # Triggered from another repo (e.g., notes)
    types: [sync-from-notes]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.128.0
    steps:
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
      - name: Checkout with submodules
        uses: actions/checkout@v5
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Update submodules to latest commit on main branch
        run: |
          git submodule sync --recursive
          git submodule deinit --all --force
          git submodule update --init --recursive
          git submodule update --remote content  # This fetches the latest commit for the content submodule
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add content
          if git diff --cached --quiet; then
            echo "No submodule changes to commit"
          else
            echo "Submodule changes detected. Committing..."
            git commit -m "chore: sync content from notes repo"
            git push origin HEAD:main
            echo "Changes pushed to main branch"
          fi

      - name: Convert markdown links to Hugo shortcodes
        run: |
          find content -name "*.md" -not -path "content/templates/*" -print0 | while IFS= read -r -d '' file; do
            # Convert [[Page Name]] → [Page Name]({{< relRef "page name.md" >}})
            sed -i -E 's/\[\[([^\|#]+)\]\]/[\1]({{< relRef "\L\1.md" >}})/g' "$file"

            # Convert [[Page Name|Alias]] → [Alias]({{< relRef "page name.md" >}})
            sed -i -E 's/\[\[([^]|]+)\|([^]]+)\]\]/[\2]({{< relRef "\L\1.md" >}})/g' "$file"

            # Convert [text](file.md) → [text]({{< relRef "file.md" >}})
            sed -i -E 's/\[([^\]]+)\]\(([^)]+)\.md\)/[\1]({{< relRef "\2.md" >}})/g' "$file"

            # Convert [[Page Name#Anchor]] → [Anchor]({{< relRef "page name.md#anchor" >}})
            sed -i -E 's/\[\[([^\|#]+)(#([^\]]+))?\]\]/[\3]({{< relRef "\L\1.md\3" >}})/g' "$file"
          done

          if git -C content diff --quiet; then
            echo "No markdown link changes in content/"
          else
            echo "Markdown link conversions detected in content/:"
            git -C content diff --color=always | cat
          fi

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
